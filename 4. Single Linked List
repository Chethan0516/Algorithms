# Single Linked List  

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Single_Linked:
    def __init__(self):
        self.head = None
    
    def append(self, data):
        new_data = Node(data)
        if self.head is None:
            self.head = new_data
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_data
    
    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")
    
llist = Single_Linked()
llist.append(10)
llist.append(20)
llist.append(30)
llist.append(40)

llist.print_list()


or


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SingleLinked:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_data = Node(data)
        if not self.head:
            self.head = new_data
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_data

    def __str__(self):
        cur = self.head
        values = []
        while cur:
            values.append(str(cur.data))
            cur = cur.next
        return "-->".join(values) + "--> None"

llist = SingleLinked()
llist.append(10)
llist.append(20)
print(llist)


or




class Node:
    def __init__(self, data, next=None):
        self.data = data
        self.next = next
    
class Single_Linked:
    def __init__(self):
        self.head = None

    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp = self.head
            while temp:
                print(temp.data, "-->", end=" ")
                temp = temp.next
            print("None")  # To indicate the end of the list

# Create the linked list
L = Single_Linked()
n = Node(10)
L.head = n
n1 = Node(20)
n.next = n1  # Correctly link the first node to the second node

# Display the linked list
L.display()

