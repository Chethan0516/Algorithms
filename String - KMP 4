# Longest string of pattern from the text  Time: O(M + N)


def LPS(pattern):
    
    lps = [0] * len(pattern)
    length = 0

    for i in range(1, len(pattern)):
        while (length>0 and pattern[length] != pattern[i]):
            length = lps[length - 1]
           
        if pattern[length] == pattern[i]:
            length += 1
            lps[i] = length
    

    # length, i =0, 1

    # while i<len(pattern):
    #     if pattern[length] == pattern[i]:
    #         length += 1
    #         i += 1
    #         lps[i] = length
    #     else:
    #         if length != 0:
    #             length = lps[length - 1]
    #         else:
    #             lps[i] = 0
    #             i += 1

    return lps

def longest_prefix(text, pattern):
    lps = LPS(pattern)
    i, j = 0, 0
    longest = 0

    while j<len(text):
        if pattern[i] == text[j]:
            i += 1
            j += 1
            longest = max(longest, i)    # longest test matched so far
        else:
            if i != 0:
                i = lps[i - 1]
            else:
                j += 1
        if i == len(pattern):
            break

    return longest

text = "ababcababc"
pattern = "ababcd"
print(longest_prefix(text, pattern))
