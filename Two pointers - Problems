sum upto to the target

def two(arr, target):

    l, r = 0, len(arr) - 1
    while l < r:
        current = arr[l] + arr[r]
        if current == target:
            return l, r
        elif current < target:
            l += 1
        else:
            r -= 1
        
    return l, r
if __name__ == "__main__":
    arr = [1, 2, 3, 4, 6]
    target = 6
    print(two(arr, target))
-----------------------------------------
remove duplicates from the sorted array

def remove_(arr):
    if not arr:
        return 0
    
    l, r = 0, 1

    while r < len(arr):
        if arr[r] != arr[l]:
            l += 1
            print(l)
            arr[l] = arr[r]
        r += 1
    return l + 1   # as it l in the last unique element and it is zero based

if __name__ == "__main__":
    arr = [1, 1, 2, 2, 3]
    result = remove_(arr)
    print(result)
    print(arr[:result])
------------------------------------------------
two sum

def two(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        count = nums[left] + nums[right]
        if count == target:
            return "{} {}".format(left, right)
        elif count > target:
            right -= 1
        else:
            left += 1

if __name__ == "__main__":
    nums = [2, 7, 11, 15]
    target = 9
    print(two(nums, target))
--------------------------------------------------
3 sum

def three(nums):
    nums.sort()
    result = []
    for i in range(len(nums)):
        left, right = i + 1, len(nums) - 1
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total > 0:
                right -= 1
            elif total < 0:
                left += 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                left += 1
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                
    return result

if __name__ == "__main__":
    nums = [-1, 0, 1, 2, -1, -4]
    print(three(nums))
-------------------------------------------------------------
container with most water

def water(height):
    left ,right = 0, len(height) - 1
    max_water = 0

    while left < right:

        width = right - left
        water_max = min(height[left], height[right]) * width 
        max_water = max(max_water, water_max)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1

    return max_water


if __name__ == "__main__":
    height = [1, 8, 6, 2, 5, 4, 8, 3, 7]
    print(water(height))
--------------------------------------------
valid palindrome


def palindrome(s):
    left, right = 0, len(s) - 1

    while left < right:
        while left < right and not s[left].isalnum():
            left += 1
        while left < right and not s[right].isalnum():
            right -= 1
        if s[left].lower() != s[right].lower():
            return False
        left += 1
        right -= 1
    return True

if __name__ == "__main__":
    s = "A man, a plan, a canal:Panama"
    print(palindrome(s))
-----------------------------------------------
sort colors

def DNF(nums):
    low, mid, high = 0, 0, len(nums) - 1

    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1
            
    return nums

if __name__ == "__main__":
    nums = [2, 0, 2, 1, 1, 0]
    print(DNF(nums))
-----------------------------------------------
trapping rain water

def water(height):
    left, right = 0, len(height) - 1
    left_max, right_max = height[left], height[right]
    water_trapped = 0
    
    while left < right:
        if height[left] < height[right]:
            if height[left] >= left_max:
                left_max = height[left]
            else:
                water_trapped += left_max - height[left]
            left += 1
        else:
            if height[right] >= right_max:
                right_max = height[right]
            else:
                water_trapped += right_max - height[right]
            right -= 1

    return water_trapped

if __name__ == "__main__":
    height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
    print(water(height))
---------------------------------------------
subarray product less than k

def sub_array(nums, k):

    if k <= 1:
        return 0
    
    product = 1
    left = 0
    right = 0
    count = 0
    result = []

    while right < len(nums) :

        product *= nums[right]

        while product >= k and left <= right:
            product /= nums[left]
            left += 1
        

        count += right - left + 1
        for i in range(right, left - 1, -1):
            result.append(nums[i:right + 1])
        right += 1

    return count, result

if __name__ == "__main__":
    nums = [10, 5, 2, 6]
    k = 100
    print(sub_array(nums, k))
-------------------------------------------
longest mountain in array

def longest_mountain(nums):
    n = len(nums)
    longest = 0
    result = []

    for i in range(1, n - 1):
        if nums[i -1] < nums[i] > nums[i + 1]:
            left, right = i, i
            while left>0 and nums[left] > nums[left - 1]:
                left -= 1
            while right < n - 1 and nums[right] > nums[right + 1]:
                right += 1
            longest = max(longest, right - left + 1)

            result = nums[left:right + 1]
            


    return longest, result if longest >= 3 else 0


if __name__ == "__main__":
    nums = [2, 1, 4, 7, 3, 2, 5]
    print(longest_mountain(nums))
--------------------------------------
