# KMP algorithm   Time: O(M + N)   Space: O(M)


def kmp(text, pattern):

    def LPS(pattern):
        # length upto pattern
        lps = [0] * len(pattern)

        # start comparing from 0, 1
        length , i = 0, 1
        while i<len(pattern):
            if pattern[length] == pattern[i]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:   # Then it goes to last matched prefix # length = 3 => lps[3 - 1] => lps[2] same value compares again in lps table
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1        # nothing equal then goes to index 0


        return lps
    
    lps = LPS(pattern)
    i, j = 0, 0
    occurances = []

    while j < len(text):
        if pattern[i] == text[j]:
            i += 1
            j += 1
        if i == len(pattern):
            occurances.append(j - i)
            i = lps[i - 1]                 # if not a match then it decrease one number and verify for prefix in lps table. if no matches means then goes to index 0
        elif j < len(text) and pattern[i] != text[j]:
            if i !=0:
                i = lps[i - 1]
            else:
                j += 1
                
    return occurances

text = "abcpqrabcxyz"
pattern = "abc"
print(kmp(text, pattern))
